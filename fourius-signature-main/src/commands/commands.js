/* eslint-disable no-undef */
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
 * See LICENSE in the project root for license information.
 */

/* global global, Office, self, window */

Office.onReady(() => {
  // If needed, Office.js is ready to be called
});

/**
 * Shows a notification when the add-in command is executed.
 * @param event {Office.AddinCommands.Event}
 */

/* start
Notification will be shown when we click on buttons */
function Notify() {
  Office.context.mailbox.item.notificationMessages.addAsync("Msg", {
    type: "informationalMessage",
    message: "Generating your SmartreplAI, hang on tight..",
    icon: "icon_id",
    persistent: true,
  });
}
/*End of code*/

/* start 
This function will run when we click on the button that is on the receiver's mail.

After clicking, it will set the data of the
receiver's mail in the local storage.*/
var emailBody;
function fromRead() {
  Office.context.mailbox.item.body.getAsync(Office.CoercionType.Text, function (result) {
    emailBody = result.value;
    localStorage.setItem("key", emailBody);
  });
  Office.context.mailbox.item.displayReplyForm({
    displayInIframe: true,
    htmlBody: "",
    subject: "Re: " + Office.context.mailbox.item.subject,
  });
}
/*End of code*/

/* Start
This function will run when we run click on Postive button
-- This Button shown on Message compose surface
-- After clicking on the button, it will get data from the local storage and send it to ChatGPT,
then ChatGPT will send an answer and that POSITIVE answer will be shown on the mail body.
*/
function positive() {
  Office.context.mailbox.item.body.getAsync(Office.CoercionType.Text, async function (result) {
    let myValue = localStorage.getItem("key");
    console.log("myValue", myValue);
    Notify();
    const res = await fetch(`http://localhost:5000/openai?question=positive reply to "${myValue}".`, {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
      },
    });
    // convert the res into json format and stored in data
    let data = await res.json();
    console.log("data", data);
    // from data.answer we store the answer in bodyAns
    let bodyAns = data.answer;
    console.log("bodyAns", bodyAns);
    // from this api we set the bodyAns on compose body
    Office.context.mailbox.item.body.setAsync(bodyAns, { coercionType: Office.CoercionType.Text }, function (result) {
      Office.context.mailbox.item.notificationMessages.removeAsync("Msg");
      Office.context.mailbox.item.notificationMessages.addAsync("positiveMsg2", {
        type: "informationalMessage",
        message: "Positive message generated by SmartreplAI......",
        icon: "icon_id",
        persistent: true,
      });
      console.log("bodyAns2", bodyAns);
      // Check for errors
      if (result.status === Office.AsyncResultStatus.Succeeded) {
        setTimeout(() => {
          Office.context.mailbox.item.notificationMessages.removeAsync("positiveMsg2");
        }, 4000);
      } else {
        console.log(result.error.message);
      }
    });
  });
}
/*End of code*/

/* Start
This function will run when we run click on Negative button
-- This Button shown on Message compose surface
-- After clicking on the button, it will get data from the local storage and send it to ChatGPT,
then ChatGPT will send an answer and that NEGATIVE answer will be shown on the mail body.
*/
function negative() {
  Office.context.mailbox.item.body.getAsync(Office.CoercionType.Text, async function (result) {
    let myValue = localStorage.getItem("key");
    Notify();
    const res = await fetch(`http://localhost:5000/openai?question=negative reply to"${myValue}".`, {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
      },
    });
    let data = await res.json();
    let bodyAns = data.answer;
    console.log("bodyAns", bodyAns);
    Office.context.mailbox.item.body.setAsync(bodyAns, { coercionType: Office.CoercionType.Text }, function (result) {
      Office.context.mailbox.item.notificationMessages.removeAsync("Msg");
      Office.context.mailbox.item.notificationMessages.addAsync("negativeMsg2", {
        type: "informationalMessage",
        message: "Negative message generated by SmartreplAI......",
        icon: "icon_id",
        persistent: true,
      });
      // Check for errors
      if (result.status === Office.AsyncResultStatus.Succeeded) {
        setTimeout(() => {
          Office.context.mailbox.item.notificationMessages.removeAsync("negativeMsg2");
        }, 4000);
      } else {
        console.log(result.error.message);
      }
    });
  });
}
/*End of code*/

/* Start
This function will run when we run click on Custom button
-- This Button shown on Message compose surface
-- After clicking on the button, it will take data from the compose body using 'getAsync', then it will send that data to ChatGPT, 
then ChatGPT will change that data and send it back, and then that data will be shown on the mail body using 'setAsync'.
*/
let customMsg;
function custom() {
  Office.context.mailbox.item.body.getAsync(Office.CoercionType.Text, async function (result) {
    customMsg = result.value;
    console.log(customMsg);
    Notify();
    const res = await fetch(`http://localhost:5000/openai?question="${customMsg}".`, {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
      },
    });
    let data = await res.json();
    console.log("data", data);
    let bodyAns = data.answer;
    console.log("bodyAns", bodyAns);
    Office.context.mailbox.item.body.setAsync(bodyAns, { coercionType: Office.CoercionType.Text }, function (result) {
      Office.context.mailbox.item.notificationMessages.removeAsync("Msg");
      Office.context.mailbox.item.notificationMessages.addAsync("customMsg", {
        type: "informationalMessage",
        message: "Custom message generated by SmartreplAI......",
        icon: "icon_id",
        persistent: true,
      });
      // Check for errors
      if (result.status === Office.AsyncResultStatus.Succeeded) {
        setTimeout(() => {
          Office.context.mailbox.item.notificationMessages.removeAsync("cutomMsg");
        }, 4000);
      } else {
        console.log(result.error.message);
      }
    });
  });
}
/*End of code*/

function getGlobal() {
  return typeof self !== "undefined"
    ? self
    : typeof window !== "undefined"
    ? window
    : typeof global !== "undefined"
    ? global
    : undefined;
}

const g = getGlobal();

// The add-in command functions need to be available in global scope
g.custom = custom;
g.negative = negative;
g.positive = positive;
g.fromRead = fromRead;
